generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserProfile {
  guest
  consumer
  member
  master
}

model User {
  id String @id @default(cuid())

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at") @db.Date

  softDeleted Boolean? @default(false) @map("soft_deleted")
  active      Boolean? @default(true)
  subscriber  Boolean? @default(false)
  suspended   Boolean? @default(false)

  accessCode String?
  passHash   String? @unique

  profile    UserProfile? @default(guest)
  name       String?
  image      String?
  email      String?      @unique
  phone      String       @unique
  document   String?      @unique
  zipCode    String?
  street     String?
  complement String?

  latitude  Float? @db.DoublePrecision
  longitude Float? @db.DoublePrecision

  defaultOrganization String?
  organizations       OrganizationUsers[]

  @@map("users")
}

enum UserRole {
  client
  assistant
  technician
  administrator
  owner
}

model OrganizationUsers {
  id String @id @default(cuid())

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at") @db.Date

  softDeleted Boolean? @default(false) @map("soft_deleted")
  active      Boolean? @default(true)

  role UserRole? @default(client)

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade)

  organizationId String       @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id], onUpdate: Cascade)

  @@index([userId, organizationId])
  @@map("organization_users")
}

model Organization {
  id String @id @default(cuid())

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at") @db.Date

  softDeleted Boolean? @default(false) @map("soft_deleted")
  active      Boolean? @default(true)

  name       String?
  image      String?
  email      String? @unique
  phone      String? @unique
  document   String  @unique
  zipCode    String?
  street     String?
  complement String?

  latitude  Float? @db.DoublePrecision
  longitude Float? @db.DoublePrecision

  users OrganizationUsers[]

  authorizationKey OrganizationKeys?
  subscriptions    Subscription[]

  @@map("organizations")
}

model OrganizationKeys {
  id String @id @default(cuid())

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at") @db.Date

  organizationId String       @unique @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id], onUpdate: Cascade)

  expireIn DateTime? @map("expire_in") @db.Date
  active   Boolean?  @default(true)

  authorizationKey String @unique @map("authorization_key")

  @@map("organization_key")
}

model Subscription {
  id String @id @default(cuid())

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at") @db.Date

  softDeleted Boolean? @default(false) @map("soft_deleted")

  organizationId String       @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id], onUpdate: Cascade)

  code           String  @unique
  customerId     String? @map("customer_id")
  subscriptionId String? @map("subscription_id")
  status         String?
  recurrence     String?

  currentPeriodEnd DateTime? @map("current_period_end")

  spendLimit Int? @default(5000) @map("spend_limit")
  spending   Int? @default(0)

  spendExceeded Boolean? @default(false) @map("spend_exceeded")

  price Float? @default(0) @db.Real

  priceId String? @map("price_id")

  @@map("subscriptions")
}
