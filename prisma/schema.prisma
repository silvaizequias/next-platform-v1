datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

enum UserProfile {
  USER
  MASTER
}

enum UserRole {
  GUEST
  CUSTOMER
  MEMBER
  ADMINISTRATOR
  OWNER
}

enum ServiceRecurrence {
  MONTHLY
  QUARTERLY
  YEARLY
}

model User {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at") @db.Date
  softDeleted Boolean?  @default(false) @map("soft_deleted")

  isActive Boolean?     @default(true) @map("is_active")
  profile  UserProfile? @default(USER)

  name         String
  image        String?
  email        String  @unique
  phone        String  @unique
  documentCode String? @unique @map("document_code")

  accessCode String? @unique @map("access_Code")
  passHash   String? @map("pass_hash")

  zipCode    String?
  street     String?
  complement String?
  district   String?
  city       String?
  state      String?
  country    String?

  latitude  Float?
  longitude Float?

  organizations OrganizationUsers[]
  subscriptions Subscription[]

  @@map("users")
}

model Organization {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at") @db.Date
  softDeleted Boolean?  @default(false) @map("soft_deleted")

  isActive Boolean? @default(true) @map("is_active")

  name         String
  image        String?
  email        String? @unique
  phone        String? @unique
  documentCode String  @unique @map("document_code")

  zipCode    String?
  street     String?
  complement String?
  district   String?
  city       String?
  state      String?
  country    String?

  latitude  Float?
  longitude Float?

  users OrganizationUsers[]

  @@map("organizations")
}

model OrganizationUsers {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  organizationId String       @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  isActive Boolean?  @default(true) @map("is_active")
  role     UserRole? @default(GUEST)

  @@index([organizationId])
  @@index([userId])
  @@map("organization_users")
}

model Subscription {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at") @db.Date
  softDeleted Boolean?  @default(false) @map("soft_deleted")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade)

  serviceId String  @map("service_id")
  service   Service @relation(fields: [serviceId], references: [id], onUpdate: Cascade)

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  @@index([userId])
  @@index([serviceId])
  @@map("subscriptions")
}

model Service {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at") @db.Date
  softDeleted Boolean?  @default(false) @map("soft_deleted")

  name        String
  solution    String             @unique
  description String
  features    String?
  price       Decimal            @db.Decimal(5, 2)
  recurrence  ServiceRecurrence? @default(MONTHLY)

  subscriptions Subscription[]

  @@map("services")
}
