generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgres"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum UserRole {
  MASTER
  MEMBER
  CUSTOMER
  GUEST
}

enum ServiceSolution {
  NONE
}

enum DocType {
  CPF
  CNPJ
  RG
  CNH
  CTPS
  PASSPORT
}

enum ContractStatus {
  ACTIVE
  SUSPENDED
  FINISHED
  CANCELED
}

enum ContractPeriod {
  MONTHLY
  QUARTERLY
  SEMESTERLY
  YEARLY
}

enum InvoceStatus {
  PENDING
  INVOICED
  CANCELED
}

model Account {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at") @db.Date
  softDeleted Boolean?  @default(false) @map("soft_deleted")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @map("refresh_token") @db.Text
  access_token      String? @map("access_token") @db.Text
  expires_at        Int?    @map("expires_at")
  token_type        String? @map("token_type")
  scope             String?
  id_token          String? @map("id_token") @db.Text
  session_state     String? @map("session_state")

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at") @db.Date
  softDeleted Boolean?  @default(false) @map("soft_deleted")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  sessionToken String   @map("session_token")
  expires      DateTime

  @@unique([sessionToken])
  @@map("sessions")
}

model User {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at") @db.Date
  softDeleted Boolean?  @default(false) @map("soft_deleted")

  isVerified Boolean? @default(false) @map("is_verified")
  isActive   Boolean? @default(false) @map("is_active")

  role      UserRole? @default(GUEST)
  passToken String?   @unique @map("pass_token")
  passHash  String?   @map("pass_hash")

  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  phone         String?   @unique
  docType       DocType?  @default(CPF) @map("doc_type")
  docCode       String?   @unique @map("doc_code")

  zipCode    String? @map("zip_code")
  street     String?
  number     String?
  complement String?
  zone       String?
  district   String?
  city       String?
  state      String?

  accounts  Account[]
  contracts Contract[]
  sessions  Session[]

  @@unique([email, phone, docCode, passToken])
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Service {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at") @db.Date
  softDeleted Boolean?  @default(false) @map("soft_deleted")

  isActive    Boolean?         @default(false) @map("is_active")
  serviceCode String?          @map("service_code")
  name        String?
  solution    ServiceSolution?
  description String?
  price       Decimal?         @default(0) @db.Decimal(10, 2)
  contracts   Contract[]

  @@unique([serviceCode])
  @@map("services")
}

model Contract {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at") @db.Date
  softDeleted Boolean?  @default(false) @map("soft_deleted")

  userId    String  @map("user_id")
  user      User    @relation(fields: [userId], references: [id])
  serviceId String  @map("service_id")
  service   Service @relation(fields: [serviceId], references: [id])

  contractCode String?         @map("contract_code")
  status       ContractStatus? @default(ACTIVE)
  description  String?
  note         String?
  startedIn    DateTime?       @map("started_in")
  period       ContractPeriod? @default(MONTHLY)
  endedIn      DateTime?       @map("ended_in")
  discount     Decimal?        @default(0) @db.Decimal(10, 2)
  invoices     Invoice[]

  @@unique([contractCode])
  @@index([userId])
  @@index([serviceId])
  @@map("contracts")
}

model Invoice {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at") @db.Date
  softDeleted Boolean?  @default(false) @map("soft_deleted")

  contractId String   @map("contractId")
  contract   Contract @relation(fields: [contractId], references: [id])

  invoiceCode String?       @map("invoice_code")
  barCode     String?       @unique @map("bar_code")
  qrCode      String?       @map("qr_code")
  status      InvoceStatus? @default(PENDING)
  description String?
  note        String?
  tax         Decimal?      @default(0) @db.Decimal(10, 2)
  amount      Decimal?      @default(0) @db.Decimal(10, 2)
  payUpTo     DateTime?     @map("pay_up_to") @db.Date
  wasPaid     Boolean?      @default(false) @map("was_paid")
  paidAt      DateTime?     @map("paid_at") @db.Date

  @@unique([invoiceCode])
  @@index([contractId])
  @@map("invoices")
}
