generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum UserRole {
  ADMINISTRATOR
  MANAGER
  SUPERVISOR
  ANALYST
  INSTRUCTOR
  TECHNICIAN
  DRIVER
  USER
}

enum UserProfile {
  MASTER
  OWNER
  MEMBER
  CUSTOMER
  GUEST
}

enum UserDocType {
  CPF
  CNPJ
  RG
  CNH
  CTPS
  PASSPORT
}

model Account {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at") @db.Date
  softDeleted Boolean?  @default(false) @map("soft_deleted")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @map("refresh_token") @db.Text
  access_token      String? @map("access_token") @db.Text
  expires_at        Int?    @map("expires_at")
  token_type        String? @map("token_type")
  scope             String?
  id_token          String? @map("id_token") @db.Text
  session_state     String? @map("session_state")

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at") @db.Date
  softDeleted Boolean?  @default(false) @map("soft_deleted")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  sessionToken String   @map("session_token")
  expires      DateTime

  @@unique([sessionToken])
  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model User {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at") @db.Date
  softDeleted Boolean?  @default(false) @map("soft_deleted")

  profile  UserProfile? @default(GUEST)
  isActive Boolean?     @default(true) @map("is_active")

  name          String?
  email         String?      @unique
  emailVerified DateTime?    @map("email_verified")
  image         String?
  phone         String?      @unique
  docType       UserDocType? @default(CPF) @map("doc_type")
  docCode       String?      @unique @map("doc_code")
  passHash      String?      @map("pass_hash")

  zipCode    String? @map("zip_code")
  complement String?
  latitude   Float?  @db.Double
  longitude  Float?  @db.Double

  accounts      Account[]
  subscriptions Subscription[]
  organizations Organization[]
  orgs          OrganizationOfUser[]
  sessions      Session[]

  @@map("users")
}

model Organization {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at") @db.Date
  softDeleted Boolean?  @default(false) @map("soft_deleted")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  name  String
  cnpj  String  @unique
  image String?
  email String? @unique
  phone String? @unique

  zipCode    String? @map("zip_code")
  complement String?

  users    OrganizationOfUser[]
  solution SolutionOfOrganization?

  @@index([userId])
  @@map("organizations")
}

model OrganizationOfUser {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at") @db.Date
  softDeleted Boolean?  @default(false) @map("soft_deleted")

  organizationId String       @unique @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id])

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  role        UserRole? @default(USER)
  isAvaliable Boolean?  @default(true) @map("is_avaliable")

  @@index([userId])
  @@map("organizations_of_users")
}

model Subscription {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at") @db.Date
  softDeleted Boolean?  @default(false) @map("soft_deleted")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  solutionId String   @map("solution_id")
  solution   Solution @relation(fields: [solutionId], references: [id])

  stripeCustomerId     String? @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId String? @unique @map(name: "stripe_subscription_id")
  stripePriceId        String? @map(name: "stripe_price_id")

  currentPeriodStart DateTime? @map("current_period_start")
  currentPeriodEnd   DateTime? @map("current_period_end")
  note               String?

  discount Decimal? @default(0) @db.Decimal(10, 2)
  tax      Decimal? @default(0) @db.Decimal(10, 2)
  amount   Decimal? @default(0) @db.Decimal(10, 2)

  isActive Boolean? @default(true) @map("is_active")

  @@index([userId])
  @@index([solutionId])
  @@map("subscriptions")
}

model Solution {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at") @db.Date
  softDeleted Boolean?  @default(false) @map("soft_deleted")

  name        String
  description String?
  url         String?  @unique
  price       Decimal? @default(0) @db.Decimal(10, 2)

  subscriptions Subscription[]
  organizations SolutionOfOrganization[]

  @@map("solutions")
}

model SolutionOfOrganization {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at") @db.Date
  softDeleted Boolean?  @default(false) @map("soft_deleted")

  solutionId String   @map("solution_id")
  solution   Solution @relation(fields: [solutionId], references: [id])

  organizationId String       @unique @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id])

  isActive Boolean? @default(true) @map("is_active")

  @@index([solutionId])
  @@map("solutions_of_organizations")
}
