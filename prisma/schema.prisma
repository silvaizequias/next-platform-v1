generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {   
  id                  String      @id             @default(cuid())

  userId              String?     @map("user_id")
  user                User?       @relation(fields: [userId], references: [id])

  type                String
  provider            String      @unique
  providerAccountId   String      @map("provider_account_id")    @unique

  refreshToken        String?     @db.Text        @map("refresh_token")
  accessToken         String?     @db.Text        @map("access_token")
  expiresAt           Int?        @map("expires_at")
  tokenType           String?     @map("token_type")
  scope               String?
  idToken             String?     @db.Text        @map("id_token")
  sessionState        String?     @map("session_state")

  @@map("accounts")
}

enum UserRole {
  MASTER
  ADMINISTRATOR
  ANALYST
  ASSISTANT
  CUSTOMER
  GUEST
}

model User {
  id              String      @id                 @default(cuid())
  createdAt       DateTime    @default(now())     @map("created_at")
  updatedAt       DateTime    @updatedAt          @map("updated_at")

  companyId       String?     @map("company_id")
  company         Company?    @relation(fields: [companyId], references: [id])

  acceptedTerms   Boolean     @default(true)      @map("accepted_terms")
  isActive        Boolean     @default(true)      @map("is_active")
  isAvaliable     Boolean     @default(true)      @map("is_avaliable")
  role            UserRole    @default(GUEST)     
  avatar          String?

  name            String?
  email           String?     @unique
  phone           String?     @unique
  docType         String?     @map("doc_type")
  docCode         String?     @map("doc_code")    @unique
  passHash        String?     @map("pass_hash")   @unique
  passToken       String?     @map("pass_token")  @unique 

  zipCode         String?     @map("zip_code")
  street          String?     
  number          String?     
  complement      String?     @db.Text
  zone            String?     
  district        String?     
  city            String?     
  state           String?      
  lat             Float?      @db.DoublePrecision
  long            Float?      @db.DoublePrecision

  accounts        Account[]
  sessions        Session[]
  accessLogs      AccessLog[]
  contracts       Contract[]

  @@map("users")
}

model Session {
  id              String      @id                 @default(cuid())
  createdAt       DateTime    @default(now())     @map("created_at")

  userId          String?     @map("user_id")
  user            User?       @relation(fields: [userId], references: [id])

  sessionToken    String      @map("session_token")      @unique
  expires         DateTime

  @@map("sessions")
}

model VerificationToken {
  identifier      String      @unique
  token           String      @unique
  expires         DateTime

  @@map("verification_tokens")
}

model AccessLog {
  id              String      @id                 @default(cuid())
  createdAt       DateTime    @default(now())     @map("created_at")

  userId          String?     @map("user_id")
  user            User?       @relation(fields: [userId], references: [id])

  jwtToken        String?     @map("jwt_token")   @unique
  role            String?

  ip              String?
  device          String?
  browser         String?

  city            String?     
  state           String?      
  lat             Float?      @db.DoublePrecision
  long            Float?      @db.DoublePrecision

  actionLogs      ActionLog[]

  @@map("access_logs")
}

model ActionLog {
  id              String      @id                 @default(cuid())
  createdAt       DateTime    @default(now())     @map("created_at")

  accessLogId     String?     @map("access_log_id")
  accessLog       AccessLog?  @relation(fields: [accessLogId], references: [id])

  path            String?
  action          String?

  @@map("action_logs")
}

model Company {
  id              String      @id                 @default(cuid())
  createdAt       DateTime    @default(now())     @map("created_at")
  updatedAt       DateTime    @updatedAt          @map("updated_at")

  isActive        Boolean     @default(true)      @map("is_active")
  apiEnabled      Boolean     @default(false)     @map("api_enabled")

  token           String?     @unique
  cnpj            String      @unique
  stateReg        String?     @map("state_regn")
  municipalReg    String?     @map("municipal_reg")
  name            String

  phone           String      @unique
  email           String      @unique
  segment         String?     
  description     String?     @db.Text

  zipCode         String?     @map("zip_code")
  street          String?     
  number          String?     
  complement      String?     @db.Text
  zone            String?     
  district        String?     
  city            String?     
  state           String?      
  lat             Float?      @db.DoublePrecision
  long            Float?      @db.DoublePrecision

  systemSettings  SystemSettings?

  users           User[]

  @@map("companies")
}

model Service {
  id              String      @id                 @default(cuid())
  createdAt       DateTime    @default(now())     @map("created_at")
  updatedAt       DateTime    @updatedAt          @map("updated_at")

  serviceCode     String?     @unique             @map("service_code")
  title           String
  subTitle        String?     @map("sub_title")     
  description     String?     @db.Text
  isActive        Boolean     @default(true)      @map("is_active")

  servicePrice    Decimal     @db.Decimal()       @map("service_price")

  items           ServiceItem[]
  contracts       Contract[]

  @@map("services")
}

model ServiceItem {
  id              String      @id                 @default(cuid())
  createdAt       DateTime    @default(now())     @map("created_at")
  updatedAt       DateTime    @updatedAt          @map("updated_at")

  serviceId       String?     @map("service_id")
  service         Service?    @relation(fields: [serviceId], references: [id])

  title           String
  description     String?     @db.Text
  isActive        Boolean     @default(true)      @map("is_active")

  @@map("service_items")
}

enum ContractRecurrence {
  SINGLE
  MONTHLY
  QUARTERLY
  SEMESTERLY
  YEARLY
}

enum ContractStatus {
  ACTIVE
  PENDING
  SUSPENDED
  INACTIVE
  CANCELED
}

model Contract {
  id                      String              @id                 @default(cuid())
  createdAt               DateTime            @default(now())     @map("created_at")
  updatedAt               DateTime            @updatedAt          @map("updated_at")

  userId                  String?             @map("user_id")
  user                    User?               @relation(fields: [userId], references: [id])

  serviceId               String?             @map("service_id")
  service                 Service?            @relation(fields: [serviceId], references: [id])  

  acceptedConditions      Boolean             @default(true)      @map("accepted_conditions")
  status                  ContractStatus      @default(ACTIVE)
  description             String?             @db.Text

  contractCode            String              @unique             @map("contract_code")
  contractPrice           Decimal             @db.Decimal()       @map("contract_price")
  recurrence              ContractRecurrence  @default(MONTHLY)
  multipleRcurrence       Int                 @default(1)         @map("multiple_recurrence")
  recurrinContractPrice   Decimal             @db.Decimal()       @map("recurring_contract_price")

  discountPercentage      Int?                @db.Integer()       @default(0)        @map("dicount_percentage")
  discountAmount          Decimal?            @db.Decimal()       @map("discount_amount")

  totalPrice              Decimal             @db.Decimal()       @map("total_price")

  @@map("contracts")
}

model SystemSettings {
  id                  String                @id                 @default(cuid())
  createdAt           DateTime              @default(now())     @map("created_at")
  updatedAt           DateTime              @updatedAt          @map("updated_at")

  companyId           String                @map("company_id")  @unique
  company             Company               @relation(fields: [companyId], references: [id])

  domain              String?               @unique
  logo                String?

  terms               TermsAndConditions[]

  @@map("system_settings")
}

model TermsAndConditions{
  id                  String          @id                 @default(cuid())
  createdAt           DateTime        @default(now())     @map("created_at")
  updatedAt           DateTime        @updatedAt          @map("updated_at")

  systemSettingsId    String          @map("system_settings_id")
  systemSettings      SystemSettings  @relation(fields: [systemSettingsId], references: [id])

  title               String          @unique
  description         String          @db.Text

  items               TermItem[]

  @@map("terms_and_conditions")
}

model TermItem {
  id                      String                @id                 @default(cuid())
  createdAt               DateTime              @default(now())     @map("created_at")
  updatedAt               DateTime              @updatedAt          @map("updated_at")

  termsAndConditionsId    String                @map("terms_and_conditions_id")
  termsAndConditions      TermsAndConditions    @relation(fields: [termsAndConditionsId], references: [id])

  title               String
  description         String          @db.Text

  @@map("term_items")
}