generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgres"
  url          = env("DEDICATED_DATABASE_URL")
  relationMode = "prisma"
}

enum UserRole {
  MASTER
  OWNER
  ADMINISTRATOR
  MEMBER
  CUSTOMER
  GUEST
}

enum DocType {
  CPF
  CNPJ
  RG
  CNH
  CTPS
  PASSPORT
}

enum SubscriptionStatus {
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
}

enum SunscriptionRecurringInterval {
  DAY
  WEEK
  MONTH
  YEAR
}

model Account {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at") @db.Date
  softDeleted Boolean?  @default(false) @map("soft_deleted")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @map("refresh_token") @db.Text
  access_token      String? @map("access_token") @db.Text
  expires_at        Int?    @map("expires_at")
  token_type        String? @map("token_type")
  scope             String?
  id_token          String? @map("id_token") @db.Text
  session_state     String? @map("session_state")

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at") @db.Date
  softDeleted Boolean?  @default(false) @map("soft_deleted")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  sessionToken String   @map("session_token")
  expires      DateTime

  @@unique([sessionToken])
  @@index([userId])
  @@map("sessions")
}

model User {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at") @db.Date
  softDeleted Boolean?  @default(false) @map("soft_deleted")

  isActive Boolean?  @default(true) @map("is_active")
  role     UserRole? @default(GUEST)

  name              String?
  email             String?   @unique
  emailVerified     DateTime? @map("email_verified")
  image             String?
  phone             String?   @unique
  docType           DocType?  @default(CPF) @map("doc_type")
  docCode           String?   @unique @map("doc_code")
  //TODOS ajustar complemento
  zipCode           String?   @map("zip_code")
  addressNumber     String?   @map("address_number")
  addressComplement String?   @map("address_complement")

  accounts      Account[]
  subscriptions Subscription[]
  sessions      Session[]

  @@unique([email, phone, docCode])
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Service {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at") @db.Date
  softDeleted Boolean?  @default(false) @map("soft_deleted")

  isAvaliable Boolean? @default(false) @map("is_avaliable")
  name        String
  description String?
  solution    String?
  url         String?
  price       Decimal? @default(0) @db.Decimal(10, 2)

  subscriptions Subscription[]

  @@unique([name])
  @@map("services")
}

model Subscription {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at") @db.Date
  softDeleted Boolean?  @default(false) @map("soft_deleted")

  serviceId String  @map("service_id")
  service   Service @relation(fields: [serviceId], references: [id])

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  stripeCustomerId     String? @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId String? @unique @map(name: "stripe_subscription_id")
  stripePriceId        String? @map(name: "stripe_price_id")

  currentPeriodStart DateTime?                      @map("current_period_start")
  recurringInterval  SunscriptionRecurringInterval? @default(MONTH) @map("recurring_interval")
  currentPeriodEnd   DateTime?                      @map("current_period_end")

  status SubscriptionStatus? @default(ACTIVE)
  note   String?

  discount Decimal? @default(0) @db.Decimal(10, 2)
  tax      Decimal? @default(0) @db.Decimal(10, 2)
  amount   Decimal? @default(0) @db.Decimal(10, 2)

  @@index([userId])
  @@index([serviceId])
  @@map("subscriptions")
}
